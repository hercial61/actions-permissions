on:
  workflow_dispatch:

permissions:
  contents: read
  issues: read
  pull-requests: read

jobs:
  job1:
    strategy:
      fail-fast: false
      matrix:
        os:
        - macos-13
        - macos-latest
        - macos-11

    runs-on: ${{ matrix.os }}
    steps:
      - run: |
          #echo "runner ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers
          sudo sysadminctl -addUser mitmproxyuser -admin
        
          # install requests for mitm plugin
          pip3 install mitmproxy requests
          # sudo cp mitm_plugin.py /Users/mitmproxyuser/mitm_plugin.py
        
          # start mitmdump in simple mode for now to generate CA certificate
          sudo -u mitmproxyuser -H bash -e -c "cd /Users/mitmproxyuser && mitmdump &"
        
          # wait for mitmdump to start and generate CA certificate
          counter=0
          while [ ! -f /Users/mitmproxyuser/.mitmproxy/mitmproxy-ca-cert.pem ]
          do
            echo "waiting for mitmdump to generate the certificate..."
            sleep 1
            counter=$((counter+1))
            if [ $counter -gt 10 ]; then
              exit 1
            fi
          done
        
          # kill mitmdump, we'll start it again in transparent mode
          pid=$(sudo lsof -i -P -n 2>/dev/null | sed -En "s/Python *([0-9]*) *mitmproxyuser *.*TCP \*:8080 \(LISTEN\)/\1/p" | head -1)
          sudo kill $pid
        
          # install mitmproxy certificate as CA
          # disable any GUI prompts for certificate installation
          sudo security authorizationdb write com.apple.trust-settings.admin allow
          # the command itself may run https requests, this is why we didn't setup transparent proxy yet
          # TODO: check if -r trustRoot is needed
          sudo security add-trusted-cert -d -p ssl -p basic -k /Library/Keychains/System.keychain /Users/mitmproxyuser/.mitmproxy/mitmproxy-ca-cert.pem
          # sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /Users/mitmproxyuser/.mitmproxy/mitmproxy-ca-cert.pem
          # curl doesn't use the system keychain, so we need to add the certificate to the openssl keychain
          # TODO: get openssl dir with openssl version -a
          sudo cat /Users/mitmproxyuser/.mitmproxy/mitmproxy-ca-cert.pem >> /usr/local/etc/openssl@1.1/cert.pem
          # set environment variable for NodeJS to use the certificate
          echo "NODE_EXTRA_CA_CERTS=/Users/mitmproxyuser/.mitmproxy/mitmproxy-ca-cert.pem" >> $GITHUB_ENV
          # set environment variable for the Python requests library to use the certificate
          echo "REQUESTS_CA_BUNDLE=/Users/mitmproxyuser/.mitmproxy/mitmproxy-ca-cert.pem" >> $GITHUB_ENV
          # set environment variable for the Elixir Hex package manager to use the certificate
          echo "HEX_CACERTS_PATH=/Users/mitmproxyuser/.mitmproxy/mitmproxy-ca-cert.pem" >> $GITHUB_ENV
          
